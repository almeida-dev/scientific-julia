# solver function
function gauss_seidel!(T, k, h, q₀, Tₑₙᵥ)

    @assert size(T) == (6, 5) "Matrix must have size = (6,5)"
    # discretization values
    Δx = 0.0025
    Δy = 0.004

    # Node 1:
    T[1, 1] = (-(Δy / Δx) * T[1, 2] - (Δx / Δy) * T[2, 1]) / -((Δy / Δx) + (Δx / Δy))

    # Node 5:
    T[1, 5] = (-(Δy / Δx) * T[1, 4] - (Δx / Δy) * T[2, 5]) / -((Δy / Δx) + (Δx / Δy))


    # Nodes 2, 3, 4:
    for i in 2:4
        T[6, i] = (-2 * q₀ * (Δx / k) - (Δy / Δx) * T[6, i-1] - (Δy / Δx) * T[6, i+1] - 2 * (Δx / Δy) * T[5, i]) / (-2 * ((Δx / Δy) + (Δy / Δx)))
    end


    # Nodes 6, 14:
    T[2, 1] = (-((h * Δx) / k) * Tₑₙᵥ - (Δy / Δx) * T[2, 2] - (Δx / Δy) * T[1, 1]) / -((Δy / Δx) + (Δx / Δy) + ((h * Δx) / k))
    T[4, 1] = (-((h * Δx) / k) * Tₑₙᵥ - (Δy / Δx) * T[4, 2] - (Δx / Δy) * T[5, 1]) / -((Δy / Δx) + (Δx / Δy) + ((h * Δx) / k))


    # Nodes 7, 15:
    T[2, 2] = (-((h * Δx) / k) * 2 * Tₑₙᵥ - ((Δy / Δx) * (T[2, 1] + T[2, 3])) - (2 * (Δx / Δy) * T[1, 2])) / (-2 * ((Δy / Δx) + (Δx / Δy) + ((h * Δx) / k)))
    T[4, 2] = (-((h * Δx) / k) * 2 * Tₑₙᵥ - ((Δy / Δx) * (T[4, 1] + T[4, 3])) - (2 * (Δx / Δy) * T[5, 2])) / (-2 * ((Δy / Δx) + (Δx / Δy) + ((h * Δx) / k)))


    # Nodes 8, 16:
    T[2, 3] = (-(((h / k) * Tₑₙᵥ) * (Δx + Δy)) - (Δy / Δx) * T[2, 2] - 2 * (Δy / Δx) * T[2, 4] - (Δx / Δy) * T[3, 3] - 2 * (Δx / Δy) * T[1, 3]) / (-(3 * (Δy / Δx) + 3 * (Δx / Δy) + (h / k) * (Δx + Δy)))
    T[4, 3] = (-(((h / k) * Tₑₙᵥ) * (Δx + Δy)) - (Δy / Δx) * T[4, 2] - 2 * (Δy / Δx) * T[4, 4] - (Δx / Δy) * T[3, 3] - 2 * (Δx / Δy) * T[5, 3]) / (-(3 * (Δy / Δx) + 3 * (Δx / Δy) + (h / k) * (Δx + Δy)))


    # Node 11:
    T[3, 3] = (-2 * ((h * Δy * Tₑₙᵥ) / k) - (Δx / Δy) * T[2, 3] - (Δx / Δy) * T[4, 3] - 2 * (Δy / Δx) * T[3, 4]) / (-2 * ((Δy / Δx) + (Δx / Δy) + ((h * Δy) / k)))


    # Nodes 9, 12, 17, 20, 21, 22:
    for i in 2:4
        T[i, 4] = (-(Δy / Δx) * T[i, 3] - (Δy / Δx) * T[i, 5] - (Δx / Δy) * T[i-1, 4] - (Δx / Δy) * T[i+1, 4]) / (-2 * ((Δx / Δy) + (Δy / Δx)))
        T[5, i] = (-(Δy / Δx) * T[5, i-1] - (Δy / Δx) * T[5, i+1] - (Δx / Δy) * T[4, i] - (Δx / Δy) * T[6, i]) / (-2 * ((Δx / Δy) + (Δy / Δx)))
    end


    # Nodes 10, 13, 18, 23:
    for i in 2:5
        T[i, 5] = (-(Δx / Δy) * T[i-1, 5] - (Δx / Δy) * T[i+1, 5] - 2 * (Δy / Δx) * T[i, 4]) / (-2 * ((Δx / Δy) + (Δy / Δx)))
    end


    # Node 19:
    T[5, 1] = (-(Δx / Δy) * T[4, 1] - (Δx / Δy) * T[6, 1] - 2 * (Δy / Δx) * T[5, 2]) / (-2 * ((Δx / Δy) + (Δy / Δx)))


    # Nodes 24, 28:
    T[6, 1] = (-q₀ * (Δx / k) - (Δy / Δx) * T[6, 2] - (Δx / Δy) * T[5, 1]) / (-((Δx / Δy) + (Δy / Δx)))
    T[6, 5] = (-q₀ * (Δx / k) - (Δy / Δx) * T[6, 4] - (Δx / Δy) * T[5, 5]) / (-((Δx / Δy) + (Δy / Δx)))


    # Nodes 25, 26, 27:
    for i in 2:4
        T[1, i] = (-((Δy / Δx) * (T[1, i-1] + T[1, i+1])) - (2 * (Δx / Δy) * T[2, i])) / (-2 * ((Δy / Δx) + (Δx / Δy)))
    end
end

function relax(x, y, λ)
    return x*λ + (1 - λ)*y
end